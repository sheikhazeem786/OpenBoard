
                    *** Notes ***

1. <canvas></canvas>
        Drawing board

2. document.querySelector("")
        Select any element from html
3. Change Canvas size 
    3.1. window.innerHeight
        Current height of tab of window
    3.2. window.innerWidth
        Current width of tab of window

4. getContext("2d)
        Gives tool to draw anything
5. Draw Line or rectangle
    5.1. rect
        5.1.1. fill -> fill -> fillStyle
        5.1.2 stroke -> boundry -> strokeStyle
    5.2. line
        5.2.1. beginPath -> starts drawing from x,y coordinates
        5.2.2. moveTo -> takes Xi,Yi coordinates to move at destination without drawing
        5.2.3. lineTo -> takes Xf,Yf coordinates and draw a line to Xi, Yi
        5.2.4. stroke -> It prduces the effect of all moveTo & lineTo

6. addEventListener (user input through)
    6.1. click -> mousedown, mouseup
    6.2. (e) -> describes everything regarding click

7. getBoundingClientRect() (adjust)
    top -> vertical distance from top-left corner
    left -> horizontal distance from top-left corner









|-----------------*index.html*-------------------------------------------
|
|       /* html */       
|   * 
|   
|       /* CSS */
|   * 
|   * 
|   * 
|
|---------------------------------------------------------------------------



|-----------------*menu.html*----------------------------------------------------------------
|
|       /* html */
|   * we have page then,
|   * first think of toolbar area
|   * having differernt tools 
|   * and a group of colors
|   * all in center
|   * then made divs depending in thought process
|   * having container of different colors
|   * tool -> tool -> tool -> color-container
|   * Replace the icon with suitable one
|   * Put all the necessary code
|   * Added color wala logic
|   * Then put all if-else of pencil, rect, & line
|
|
|       /* CSS */
|   * have to justify hozrizontally in center
|   * the apply width as 90vw->90% view width of screen
|   * then margin 0 auto -> left-right && top-bottom equal margin
|   * height coz children should have space for alignment
|   * if want to change image size then change give height to image directly by creating class over them
|   * height, width, bordr-radius must be same in every color symbol
|   * the good practice is to give class to every element.
|
|   PROPERTIES  |    pencil  |    rect   |   line
|   ------------|------------|-----------|--------
|   mousedown   |     y      |    y      |    y
|   mouseup     |     y      |    y      |    y
|   mousemove   |     y      |    n      |    n
|
|-----------------------------------------------------------------------------------------------


|-----------------*options.html*-------------------------------------------
|
|       /* html */       
|   * think of a area in which the options would come over
|   * then make a div class of the size
|   * then make different div classes of the different size circle
|   
|       /* CSS */
|   * define the heighth width of the box
|   * define the height, width, border-radius and colour of circles to be drawn
|   * align, justify and flex them
|
|---------------------------------------------------------------------------












        *** EXTRA ROUGH NOTES ***

** Link in head for the icons to run:->
    <head>
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    </head>

<body>
    <h1>Canvas Example</h1>

** Icons class from fonawesome.com:->
    <i class="fas fa-square"></i>
    <i class="fas fa-grip-lines-vertical"></i>
** Drawing board tag:->
    <canvas></canvas>

</body>

** <!-- HTML js inject -->
<script>
** Use to fill color in shapes:->
        tool.fillStyle = "green";

** Use to build rectangle:->
        tool.fillRect(0, 0, 250, 250);

** Use to make boundry:-> 
        tool.strokeStyle = "red";
        boundry is made
        tool.strokeRect(50, 50, 300, 300);
    // like a paint, it overlaps
    
** To select anything from html we use querySelector:->
    let canvasBoard = document.querySelector("canvas");

** Used icon class name in querySelector to select Shapes:->
    let rectTool = document.querySelector(".fa-square");
    let lineTool = document.querySelector(".fa-grip-lines-vertical");

** Saved as tool of choice
    let currTool = "rectTool";

** Default height width is smaller, so we need to manually define height and width
    ** Current height of tab of window
        canvasBoard.height = window.innerHeight;
    ** Current height of tab of window
        canvasBoard.width = window.innerWidth;

** This line gives you tool to draw on canvas
    let tool = canvasBoard.getContext("2d");


    let body = document.querySelector("body");

** Tool change logic (Click = mousedown + mouseup):->
    ** If clicked on rectangle, then currTool becomes rectTool:->
        rectTool.addEventListener("click", function() {
            currTool = "rectTool";
        })
    ** If clicked on line, then currTool becomes lineTool:->    
        lineTool.addEventListener("click", function() {
            currTool = "lineTool";
        })

** Gets the insight of canvas and where drawing lacks:->
** Canvas board -> Top point se kitna neeche hai
        let boardTop = canvasBoard.getBoundingClientRect().top;
** Canvas board -> Left point se kitna aage hai
        let boardLeft = canvasBoard.getBoundingClientRect().left;
    
    // press on the screen
    let iX, iY, fX, fY;
    body.addEventListener("mousedown",
        function(e) {            
            // alert("mouse was pressed");
            // console.log(e);

** Get position of click:->
    let xPos = e.clientX;
    let yPos = e.clientY;
    console.log(xPos, yPos)

** Initial X and Initial Y location:-> with accuracy
    iX = e.clientX + boardLeft;
    iY = e.clientY - boardTop;
        
        })


    body.addEventListener("mouseup",
        function(e) {
            // alert("Mouse was lifted");
            // console.log(e);
            // let xPos = e.clientX;
            // let yPos = e.clientY;
            // console.log(xPos, yPos)

** Fianl X and Final Y location:-> with accuracy
            fX = e.clientX + boardLeft;
            fY = e.clientY - boardTop;

** To find the width and height for rectangle:->            
            let width = fX - iX;
            let height = fY - iY;

** If the clicked choice is rectangle the drwa rectangle
            if (currTool == "rectTool") {
                tool.strokeRect(iX, iY, width, height);
            } 

** else draw line
            else {
                tool.beginPath();
                tool.moveTo(iX, iY);
                tool.lineTo(fX, fY);
                tool.stroke();
            }

        })
</script>


** Four functions are used to draw anything:->
    1) beginpath (starts drawing from x,y coordinates)
    2) moveto (takes Xi,Yi coordinates to move at destination without drawing)
    3) lineTo (takes Xf,Yf coordinates and draw a line to Xi, Yi)
    4) stroke (It prduces the effect of all moveTo & lineTo)

